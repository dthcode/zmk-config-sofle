/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        autoshift: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hr_mod: hr_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home_row_mod {
            bindings = <
&kp ESCAPE          &kp N1              &kp N2              &kp N3           &kp N4                &kp N5                                            &kp N6               &kp N7                 &kp N8                   &kp N9               &kp N0                       &kp MINUS
&kp ENTER           &kp Q               &kp W               &kp E            &kp R                 &kp T                                             &kp Y                &kp U                  &kp I                    &kp O                &kp P                        &kp LBKT
&mt LEFT_SHIFT TAB  &hr_mod LEFT_GUI A  &hr_mod LEFT_ALT S  &hr_mod LCTRL D  &hr_mod LEFT_SHIFT F  &hr_mod LEFT_GUI G                                &hr_mod RIGHT_GUI H  &hr_mod RIGHT_SHIFT J  &hr_mod RIGHT_CONTROL K  &hr_mod RIGHT_ALT L  &hr_mod RIGHT_GUI SEMICOLON  &hr_mod RIGHT_SHIFT SQT
&mt LCTRL F17       &kp Z               &kp X               &kp C            &kp V                 &kp B               &kp C_MUTE         &none      &kp N                &kp M                  &kp COMMA                &kp DOT              &kp FSLH                     &kp ENTER
                                        &mt LEFT_ALT F18    &kp LEFT_GUI     &kp SPACE             &lt 3 BACKSPACE     &lt 4 BACKSPACE    &kp ENTER  &mo 4                &lt 5 SPACE            &kp RIGHT_GUI            &mt RIGHT_ALT F18
            >;
        };

        autoshift {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&mt LEFT_SHIFT ESCAPE  &autoshift LS(NUMBER_1) NUMBER_1  &autoshift LS(NUMBER_2) NUMBER_2  &autoshift LS(NUMBER_3) NUMBER_3  &autoshift LS(NUMBER_4) NUMBER_4  &autoshift LS(NUMBER_5) NUMBER_5                             &autoshift LS(NUMBER_6) NUMBER_6  &autoshift LS(NUMBER_7) NUMBER_7  &autoshift LS(NUMBER_8) NUMBER_8  &autoshift LS(NUMBER_9) NUMBER_9  &autoshift LS(NUMBER_0) NUMBER_0    &autoshift LS(MINUS) MINUS
&kp ENTER              &autoshift LS(Q) Q                &autoshift LS(W) W                &autoshift LS(E) E                &autoshift LS(R) R                &autoshift LS(T) T                                           &autoshift LS(Y) Y                &autoshift LS(U) U                &autoshift LS(I) I                &autoshift LS(O) O                &autoshift LS(P) P                  &autoshift LS(LEFT_BRACKET) LEFT_BRACKET
&mt LEFT_SHIFT TAB     &autoshift LS(A) A                &autoshift LS(S) S                &autoshift LS(D) D                &autoshift LS(F) F                &autoshift LS(G) G                                           &autoshift LS(H) H                &autoshift LS(J) J                &autoshift LS(K) K                &autoshift LS(L) L                &autoshift LS(SEMICOLON) SEMICOLON  &autoshift LS(SQT) SQT
&mt LEFT_CONTROL F17   &autoshift LS(Z) Z                &autoshift LS(X) X                &autoshift LS(C) C                &autoshift LS(V) V                &autoshift LS(B) B                &kp C_MUTE         &none   &autoshift LS(N) N                &autoshift LS(M) M                &autoshift LS(COMMA) COMMA        &autoshift LS(PERIOD) PERIOD      &autoshift LS(SLASH) SLASH          &kp ENTER
                                                         &mt LEFT_ALT F18                  &kp LEFT_GUI                      &kp SPACE                         &lt 3 BACKSPACE                   &lt 4 BACKSPACE    &tog 1  &mo 4                             &lt 5 SPACE                       &kp LEFT_GUI                      &mt LEFT_ALT F18
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        default {
            bindings = <
&kp ESCAPE          &kp N1  &kp N2            &kp N3        &kp N4     &kp N5                                      &kp N6  &kp N7       &kp N8         &kp N9             &kp N0    &kp MINUS
&kp ENTER           &kp Q   &kp W             &kp E         &kp R      &kp T                                       &kp Y   &kp U        &kp I          &kp O              &kp P     &kp LBKT
&mt LEFT_SHIFT TAB  &kp A   &kp S             &kp D         &kp F      &kp G                                       &kp H   &kp J        &kp K          &kp L              &kp SEMI  &mt LEFT_SHIFT SQT
&mt LCTRL F17       &kp Z   &kp X             &kp C         &kp V      &kp B            &kp C_MUTE         &none   &kp N   &kp M        &kp COMMA      &kp DOT            &kp FSLH  &kp ENTER
                            &mt LEFT_ALT F18  &kp LEFT_GUI  &kp SPACE  &lt 3 BACKSPACE  &lt 4 BACKSPACE    &tog 2  &mo 4   &lt 5 SPACE  &kp RIGHT_GUI  &mt RIGHT_ALT F18
            >;
        };

        lower_layer {
            display-name = "lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &kp F1                  &kp F2             &kp F3           &kp F4                &kp F5                                  &kp F6                 &kp F7                     &kp F8                              &kp F9                                &kp F10                    &kp F11
&trans  &kp N1                  &kp N2             &kp N3           &kp N4                &kp N5                                  &kp N6                 &kp N7                     &kp N8                              &kp N9                                &kp N0                     &kp F12
&trans  &kp EXCL                &kp AT             &kp HASH         &kp DLLR              &kp PRCNT                               &kp CARET              &kp AMPS                   &kp ASTRK                           &kp LPAR                              &kp RPAR                   &autoshift UNDERSCORE MINUS
&trans  &autoshift TILDE GRAVE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans    &trans  &autoshift PLUS EQUAL  &autoshift QUESTION SLASH  &autoshift LEFT_BRACE LEFT_BRACKET  &autoshift RIGHT_BRACE RIGHT_BRACKET  &autoshift PIPE BACKSLASH  &trans
                                &trans             &trans           &trans                &trans                &trans    &none   &trans                 &trans                     &trans                              &trans
            >;
        };

        raise_layer {
            display-name = "raise";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&trans  &none  &none         &kp LS(UP)    &none          &none                    &none         &none         &none                  &none                      &none          &none
&trans  &none  &kp LS(LEFT)  &kp UP        &kp LS(RIGHT)  &none                    &none         &kp LA(LEFT)  &kp UP                 &kp LA(RIGHT)              &none          &none
&trans  &none  &kp LEFT      &kp DOWN      &kp RIGHT      &none                    &kp LG(LEFT)  &kp LEFT      &kp DOWN               &kp RIGHT                  &kp LG(RIGHT)  &none
&trans  &none  &none         &kp LS(DOWN)  &none          &none   &none     &none  &none         &none         &kp LA(RIGHT_BRACKET)  &kp LS(LA(RIGHT_BRACKET))  &none          &trans
               &trans        &trans        &trans         &trans  &trans    &none  &trans        &trans        &trans                 &trans
            >;
        };

        adjust {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none  &none  &none  &none  &none  &none
&none       &none         &none         &none         &none         &none                         &none  &none  &none  &none  &none  &none
&none       &tog 1        &tog 2        &none         &none         &none                         &none  &none  &none  &none  &none  &none
&none       &none         &none         &none         &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
                          &none         &none         &none         &none         &none    &none  &none  &none  &none  &none
            >;
        };

        no_thumb {
            bindings = <
&kp ESCAPE     &none               &none               &none            &none                 &none                                      &none                &none                  &none                    &none                &none                        &tog 0
&kp ENTER      &kp N1              &kp N2              &kp N3           &kp N4                &kp N5                                     &kp N6               &kp N7                 &kp N8                   &kp N9               &kp N0                       &kp MINUS
&kp BACKSPACE  &kp Q               &kp W               &kp E            &kp R                 &kp T                                      &kp Y                &kp U                  &kp I                    &kp O                &kp P                        &kp LBKT
&kp Z          &hr_mod LEFT_GUI A  &hr_mod LEFT_ALT S  &hr_mod LCTRL D  &hr_mod LEFT_SHIFT F  &hr_mod LEFT_GUI G  &none        &none     &hr_mod RIGHT_GUI H  &hr_mod RIGHT_SHIFT J  &hr_mod RIGHT_CONTROL K  &hr_mod RIGHT_ALT L  &hr_mod RIGHT_GUI SEMICOLON  &kp APOS
                                   &kp X               &kp C            &kp V                 &kp B               &kp SPACE    &kp FSLH  &kp N                &kp M                  &kp COMMA                &kp DOT
            >;
        };
    };
};
